******************************
******** KQL Workshop ********
******************************
******* Version: 0.0.1 *******
******************************
***** -By: Matt Scheurer *****
******************************
******* x.com: @c3rkah *******
******************************


******************************
******** Introduction ********
******************************

What is the Kusto Query Language (KQL)?

The Kusto Query Language (KQL) is a powerful query language for exploring and analyzing data in a variety of Microsoft platforms. Think of KQL being useful for retrieving and analyzing log data similar to how the Structured Query Language (SQL) is useful for working with databases and their contents. KQL is the defacto query language used throughout Microsoft Azure, the Microsoft Sentinel Security Information and Event Management (SIEM) platform, and a variety of Microsoft Defender security solutions to name a few.

NOTE: Microsoft Azure Resource Graph, Microsoft Defender for Endpoints (MDE) "Advanced Hunting" and others lack support for some tables, sources, and render operators available in native KQL.


******************************
******** Exercise 00: ********
******************************

KQL Syntax Basics
-----------------

Having a foundational knowledge of another query language such as the Structured Query Language (SQL) helps with learning KQL faster, but is not required. There are vast differences between the operators and syntax between both KQL and SQL. A KQL query typically starts with a data source and uses operators connected by the pipe (|) character.

Pro Tip: Always use the at sign "@" before the " in strings to account for spacing, non-standard alpa-numeric characters, etc.

Getting the Syntax correct
--------------------------

In General, if KQL isn't attempting to help you with auto-fill pop-up suggestions along the way, something probably isn't right. Not seeing color coded search operators and column names is another indicator that our KQL syntax might be off.

The comment (remark) trick
--------------------------

Use double forward slashes (//) to comment portions of the query language, which is then ignored by KQL.

When to use the "//" comments:
- Anyplace, anytime
- At the beginning of a line
- To explain what a section of the KQL query is doing
- For debugging and troubleshooting improper syntax or a broken statement!

Multiple Tab Support
--------------------

Most KQL platforms support the use of multiple tabs, which may be named or renamed to suit your specific purposes. This is a helpful method for experimenting and keeping queries logically separated from each other.

Restrict results by rendered output columns
-------------------------------------------

"project" to specify the output fields
| project column1, column2, column3

NOTE: Spaces between the columns is optional, but might help with readability.

Restricting results by operators
--------------------------------

- "limit" vs "take" vs "top"
-- "limit" and "take" essentially work the same and are interchangable
- "take" retrieves a random subset (no ordering) of results
- "top" returns the most (or least) prevalent criteria results
-- “top by” is the highest number of results based on the criteria "asc" or "desc"

Restricting results by time
---------------------------

Examples:
| sort by Timestamp
| top 100 by Timestamp desc
| where Timestamp < ago(3d)
| where Timestamp >= datetime(2025-06-23) and Timestamp < datetime(2025-06-24)
| search in (Thing1,Thing2,Thing3,) and Timestamp between (ago(1h) .. now())

Deduplicated (unique) results
-----------------------------

Example:
| distinct [COLUMN-NAME]

Summarize results
-----------------

| summarize count() by [COLUMN-NAME]

Case Sensitivity
----------------

KQL hash searches are typically case sensitive and require lower case alphebetic characters. Annoyingly, PowerShell's built-in Hashing cmdlet returns alphabetic hash values in upper-case by default. Use the following in PowerShell to convert returned hash values to lower-case so KQL finds them:
(Get-FileHash -Algorithm SHA256 "[FILEPATH]").Hash.ToLower()

MISC
----

Semicolon “;” in KQL
- Defines multiple queries in one
- Create usable named expressions ("like" functions or "let" statements)
- Chain operations that depend on earlier definitions


******************************
******** Exercise 01: ********
******************************

Getting Started
---------------

We'll leverage the free "Kusto Detective Agency" training platform environment for our KQL workshop lab exercises. For the purposes of this training, we will refer to the top window pane as the "query" window, and the bottom pane as the "results" window.

Steps:

1. Go to the web site, https://detective.kusto.io/
2. Click on "Go to Inbox".
3. Click on the "Onboarding" message.
4. Click on the "Run" button to launch the "Azure Data Explorer".
5. Click on the "Homoe" icon.
6. Click on the "Get Data" icon to note the variety of "data sources" which are connectable and importable to the Azure Data Explorer.
7. Click on the "Cancel" button to exit the Get Data settings and return to the Home screen.
8. Click on one of the "Query" buttons to open the KQL screen.
9. Note that the KQL Query window supports multiple renamable tabs for multiple active queries.
10. Expand the "Security Logs" database to review available tables in the example data.


******************************
******** Exercise 02: ********
******************************

GIGO
----

"GIGO" is an acronym for the concept of "Garbage In, Garbage Out".

SIEM platforms and query languages can only provide results as good as the quality of the logs and data hosted in them. There are a variety of issues plaguing SIEM logs. Common problems are log configuration issues, health and uptime failures, not ingesting data properly, data indexing incorrectly, data and/or fields not parsing correctly, and more.

Steps, Part 1:

1. Clear the KQL window or begin with a new tab.
2. Navigate down to the "SecurityLogs" database and expand the list of tables.
3. Double click on the "Email" table to add it to the KQL window.
4. Delete the second line, especially the pipe (|) symbol.
5. Verify that there is only one line with the following query:
   database('SecurityLogs').table('Email')
6. Click the "Run" button giving the Azure Data Explorer time to complete the query.

At first glance, it appears that we have a good set of data. However, upon further inspection we see the data column names do not match the expected data types outside of the "event_time" appearing to be a valid timestamp. Unfortunately, these data type mismatches are a somewhat common issue observed within SIEM platforms regardless of the vendor platform.

"event_time" is as expected, but is the only such field which does.
"sender": appears to be our inbound mail server name.
"reply_to": appears to be the IP address belonging to the sender's email transport gateway.
"recipient": appears to be a browser (webmail?) user agent string value.
"subject": appears to be the username of the email message recipient.
"accepted": appears to be a null value "," from the CSV data and an unused field.
"link": appears to be a hexadecimal Message ID number. 

Conclusions: We can adjust our queries for the actual information we want or avoid using the "Email" table completely. However, we can fix our column names on the fly using KQL.

Steps, Part 2:

1. Add the following code (without the double quotes) to the second line: "| project-rename server=sender,src_ip=reply_to,user_agent=recipient,username=subject,message_id=link"
2. Add the following code (without the double quotes) to the third line: "| project-away accepted" server=sender,src_ip=reply_to,user_agent=recipient,username=subject,message_id=link"
3. Review and ensure that the full KQL query appears as follows:

   database('SecurityLogs').table('Email') 
   | project-rename server=sender,src_ip=reply_to,user_agent=recipient,username=subject,message_id=link
   | project-away accepted

4. Click on the "Run" button.

This returns more appropriately named columns in our KQL results. The "project-rename" operator lets us rename one or more columns to suit our data or personal preferences. The "project-away" lets us hide a column(s) from the returned query results.

NOTES: Unlike many operators KQL does not like dashes in the column names, which is why underscores were used instead. Column names must be unique, which we chose "username" instead of "recipient", since the "recipient" column name already existed in our database table.


******************************
******** Exercise 03: ********
******************************

Reviewing log data in the "SecurityLogs" database
-------------------------------------------------

The purpose of this exercise is to familiarize yourself with the log data contained in the sample database.

Steps:

1. Clear the KQL window or begin with a new tab.
2. Navigate down to the "SecurityLogs" database and expand the list of tables.
3. Double click on the "AuthenticationEvents" table to add it to the KQL window.
4. Delete the second line, especially the pipe (|) symbol.
5. Verify that there is only one line with the following query:
   database('SecurityLogs').table('AuthenticationEvents')
6. Click the "Run" button giving the Azure Data Explorer time to complete the query.
7. Review samples of the log data being returned.
8. Click the greater than  symbol ">" to the left of the timestamp of any result to review the log lines in detail.
9. Resize the "Full" content view to the preferred height, and scroll through the details.
10. Click the caron (inverted caret) "ˇ" to return to the single log line view.

Repeat these steps for each of the other remaining "SecurityLogs" database tables (Employees, FileCreationEvents, InboundBrowsing, OutboundBrowsing, PassiveDns, and ProccessEvents).


******************************
******** Exercise 04: ********
******************************

Incident Response and Threat Hunt use cases
-------------------------------------------

Failed Logins scenario:

A high number of Failed logins is potentially concerning. Password changes, password expirations, scripts, and automation may cause a higher than usual number of failed account login attempts. A high volume of login failures may also indicate a cyber attack such as: brute force, fuzzing, and various other password attacks. Before we investigate them, we first want to identify our top account(s) frequently failing login attempts.

Which account has the highest number of failed login attempts?

Run the following KQL query to get a list of accounts to identify the username having the most login failures:

database('SecurityLogs').table('AuthenticationEvents') 
| where result contains @"Failed"
| summarize count() by username
| sort by count_

Next, we're going to focus our investigation on the "jadenman" account activity. We'll comment out (//) lines 3 and 4, and add the "jadenman" account to our KQL by changing to the following:

database('SecurityLogs').table('AuthenticationEvents') 
| where result contains @"Failed"
// | summarize count() by username
// | sort by count_
| where username == @"jadenman"

Review the 22 records (notice that matches the count in our first query). Some interesting results are that we see a relatively small number of failed logins most days over a 5-day period. While that in and of itself isn't highly suspicious, there are other potentially concerning artifacts. Scrolling through and visually scanning the data, we do see that it's not a single user_agent in the logs. We can modify our KQL to get a list of unique user-agent strings as noted below:

database('SecurityLogs').table('AuthenticationEvents') 
| where result contains @"Failed"
// | summarize count() by username
// | sort by count_
| where username == @"jadenman"
| summarize count() by user_agent

This returns 2 distinct user-agent strings in our results. Most users generally have a preferred web browser and stay with that. However, some users might have multiple devices (i.e., desktop, laptop, mobile device, etc.), which could account for the activity. Lets continue our investigation. Comment out the last "| summarize" line we added previoiusly and rerun the following query:

database('SecurityLogs').table('AuthenticationEvents') 
| where result contains @"Failed"
// | summarize count() by username
// | sort by count_
| where username == @"jadenman"
// | summarize count() by user_agent

One thing that catches an experienced eye is the unusually high number of unique source IP addresses that do not appear to be any sort of a continguous CIDR range. Let's get a list of all the unique IP addresses producing fake logins for the "jadenman" account. Let's obtain a complete deduplicated list of unique IP addresses. Add the line "| distinct src_ip" to the bottom of our KQL query as depicted below and "Run" the query again:

database('SecurityLogs').table('AuthenticationEvents') 
| where result contains @"Failed"
// | summarize count() by username
// | sort by count_
| where username == @"jadenman"
// | summarize count() by user_agent
| distinct src_ip

This returns 21 unique records, when the total number of failed logins for this one account was 22. One consideration would be to investigate whether the IP addresses belong to the same ISP? One question worth asking might be if the user was traveling over that stretch of time? If so, how do they connect to get online (public wifi, hotel wifi, hotspotting their mobile phone, etc.)? Are they using a VPN service with a large number of exit nodes which are very geographically distributed. In lieu of a reasonable explanation, these failed logins from a bunch of unique IP addresses is an indicator of potential credential enumeration attack attempts by a threat actor(s).


******************************
************ Misc ************
******************************

Further Learning
----------------

We've covered a lot of ground in these lab exercises, but barely scratched the surface on the full capabilities of KQL. Here are some additional resources to continue learning more about KQL.

KQL quick reference
https://learn.microsoft.com/en-us/kusto/query/kql-quick-reference?view=azure-data-explorer&preserve-view=true

Microsoft "Hunting Queries"
https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries
https://github.com/Azure/Azure-Sentinel/tree/master/Hunting%20Queries/Microsoft%20365%20Defender

Microsoft Sentinel Ninja Training
https://aka.ms/SentinelNinjaTraining
